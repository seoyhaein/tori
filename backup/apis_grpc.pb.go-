// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: apis.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBApisService_SyncFoldersInfo_FullMethodName = "/protos.DBApisService/SyncFoldersInfo"
)

// DBApisServiceClient is the client API for DBApisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DBApisService 대신 SyncFoldersInfo 라는 이름의 서비스를 정의
type DBApisServiceClient interface {
	// 클라이언트의 요청에 따라 서버의 폴더와 DB를 비교한 후, 업데이트가 필요한 경우 수행하고 결과를 반환
	SyncFoldersInfo(ctx context.Context, in *SyncFoldersInfoRequest, opts ...grpc.CallOption) (*SyncFoldersInfoResponse, error)
}

type dBApisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBApisServiceClient(cc grpc.ClientConnInterface) DBApisServiceClient {
	return &dBApisServiceClient{cc}
}

func (c *dBApisServiceClient) SyncFoldersInfo(ctx context.Context, in *SyncFoldersInfoRequest, opts ...grpc.CallOption) (*SyncFoldersInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncFoldersInfoResponse)
	err := c.cc.Invoke(ctx, DBApisService_SyncFoldersInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBApisServiceServer is the server API for DBApisService service.
// All implementations must embed UnimplementedDBApisServiceServer
// for forward compatibility.
//
// DBApisService 대신 SyncFoldersInfo 라는 이름의 서비스를 정의
type DBApisServiceServer interface {
	// 클라이언트의 요청에 따라 서버의 폴더와 DB를 비교한 후, 업데이트가 필요한 경우 수행하고 결과를 반환
	SyncFoldersInfo(context.Context, *SyncFoldersInfoRequest) (*SyncFoldersInfoResponse, error)
	mustEmbedUnimplementedDBApisServiceServer()
}

// UnimplementedDBApisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBApisServiceServer struct{}

func (UnimplementedDBApisServiceServer) SyncFoldersInfo(context.Context, *SyncFoldersInfoRequest) (*SyncFoldersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFoldersInfo not implemented")
}
func (UnimplementedDBApisServiceServer) mustEmbedUnimplementedDBApisServiceServer() {}
func (UnimplementedDBApisServiceServer) testEmbeddedByValue()                       {}

// UnsafeDBApisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBApisServiceServer will
// result in compilation errors.
type UnsafeDBApisServiceServer interface {
	mustEmbedUnimplementedDBApisServiceServer()
}

func RegisterDBApisServiceServer(s grpc.ServiceRegistrar, srv DBApisServiceServer) {
	// If the following call pancis, it indicates UnimplementedDBApisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBApisService_ServiceDesc, srv)
}

func _DBApisService_SyncFoldersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncFoldersInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBApisServiceServer).SyncFoldersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBApisService_SyncFoldersInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBApisServiceServer).SyncFoldersInfo(ctx, req.(*SyncFoldersInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBApisService_ServiceDesc is the grpc.ServiceDesc for DBApisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBApisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DBApisService",
	HandlerType: (*DBApisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncFoldersInfo",
			Handler:    _DBApisService_SyncFoldersInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis.proto",
}

const (
	DataBlockService_GetDataBlock_FullMethodName = "/protos.DataBlockService/GetDataBlock"
)

// DataBlockServiceClient is the client API for DataBlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataBlockService: 클라이언트의 요청에 대해 DataBlockData 를 반환하는 서비스
type DataBlockServiceClient interface {
	GetDataBlock(ctx context.Context, in *GetDataBlockRequest, opts ...grpc.CallOption) (*GetDataBlockResponse, error)
}

type dataBlockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataBlockServiceClient(cc grpc.ClientConnInterface) DataBlockServiceClient {
	return &dataBlockServiceClient{cc}
}

func (c *dataBlockServiceClient) GetDataBlock(ctx context.Context, in *GetDataBlockRequest, opts ...grpc.CallOption) (*GetDataBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataBlockResponse)
	err := c.cc.Invoke(ctx, DataBlockService_GetDataBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataBlockServiceServer is the server API for DataBlockService service.
// All implementations must embed UnimplementedDataBlockServiceServer
// for forward compatibility.
//
// DataBlockService: 클라이언트의 요청에 대해 DataBlockData 를 반환하는 서비스
type DataBlockServiceServer interface {
	GetDataBlock(context.Context, *GetDataBlockRequest) (*GetDataBlockResponse, error)
	mustEmbedUnimplementedDataBlockServiceServer()
}

// UnimplementedDataBlockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataBlockServiceServer struct{}

func (UnimplementedDataBlockServiceServer) GetDataBlock(context.Context, *GetDataBlockRequest) (*GetDataBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBlock not implemented")
}
func (UnimplementedDataBlockServiceServer) mustEmbedUnimplementedDataBlockServiceServer() {}
func (UnimplementedDataBlockServiceServer) testEmbeddedByValue()                          {}

// UnsafeDataBlockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataBlockServiceServer will
// result in compilation errors.
type UnsafeDataBlockServiceServer interface {
	mustEmbedUnimplementedDataBlockServiceServer()
}

func RegisterDataBlockServiceServer(s grpc.ServiceRegistrar, srv DataBlockServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataBlockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataBlockService_ServiceDesc, srv)
}

func _DataBlockService_GetDataBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBlockServiceServer).GetDataBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataBlockService_GetDataBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBlockServiceServer).GetDataBlock(ctx, req.(*GetDataBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataBlockService_ServiceDesc is the grpc.ServiceDesc for DataBlockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataBlockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DataBlockService",
	HandlerType: (*DataBlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataBlock",
			Handler:    _DataBlockService_GetDataBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis.proto",
}
